/*
 * generated by Xtext 2.29.0
 */
package info.computationalmodeling.lang.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import info.computationalmodeling.lang.ide.contentassist.antlr.internal.InternalMaxPlusMatrixParser;
import info.computationalmodeling.lang.services.MaxPlusMatrixGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MaxPlusMatrixParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MaxPlusMatrixGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MaxPlusMatrixGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
			builder.put(grammarAccess.getNumberAccess().getValueAlternatives_1_0(), "rule__Number__ValueAlternatives_1_0");
			builder.put(grammarAccess.getPNIntAccess().getAlternatives(), "rule__PNInt__Alternatives");
			builder.put(grammarAccess.getMaxPlusMatrixModelAccess().getGroup(), "rule__MaxPlusMatrixModel__Group__0");
			builder.put(grammarAccess.getMaxPlusMatrixModelAccess().getGroup_4(), "rule__MaxPlusMatrixModel__Group_4__0");
			builder.put(grammarAccess.getMaxPlusMatrixModelAccess().getGroup_5(), "rule__MaxPlusMatrixModel__Group_5__0");
			builder.put(grammarAccess.getMaxPlusMatrixModelAccess().getGroup_6(), "rule__MaxPlusMatrixModel__Group_6__0");
			builder.put(grammarAccess.getMaxPlusMatrixAccess().getGroup(), "rule__MaxPlusMatrix__Group__0");
			builder.put(grammarAccess.getMaxPlusMatrixAccess().getGroup_4(), "rule__MaxPlusMatrix__Group_4__0");
			builder.put(grammarAccess.getRowAccess().getGroup(), "rule__Row__Group__0");
			builder.put(grammarAccess.getRowAccess().getGroup_1(), "rule__Row__Group_1__0");
			builder.put(grammarAccess.getVectorSequenceAccess().getGroup(), "rule__VectorSequence__Group__0");
			builder.put(grammarAccess.getVectorSequenceAccess().getGroup_4(), "rule__VectorSequence__Group_4__0");
			builder.put(grammarAccess.getEventSequenceAccess().getGroup(), "rule__EventSequence__Group__0");
			builder.put(grammarAccess.getLabelsAccess().getGroup(), "rule__Labels__Group__0");
			builder.put(grammarAccess.getLabelsAccess().getGroup_1(), "rule__Labels__Group_1__0");
			builder.put(grammarAccess.getRatioAccess().getGroup(), "rule__Ratio__Group__0");
			builder.put(grammarAccess.getMaxPlusMatrixModelAccess().getNameAssignment_2(), "rule__MaxPlusMatrixModel__NameAssignment_2");
			builder.put(grammarAccess.getMaxPlusMatrixModelAccess().getMatricesAssignment_4_1(), "rule__MaxPlusMatrixModel__MatricesAssignment_4_1");
			builder.put(grammarAccess.getMaxPlusMatrixModelAccess().getVectorsequencesAssignment_5_1(), "rule__MaxPlusMatrixModel__VectorsequencesAssignment_5_1");
			builder.put(grammarAccess.getMaxPlusMatrixModelAccess().getEventsequencesAssignment_6_1(), "rule__MaxPlusMatrixModel__EventsequencesAssignment_6_1");
			builder.put(grammarAccess.getMaxPlusMatrixAccess().getNameAssignment_0(), "rule__MaxPlusMatrix__NameAssignment_0");
			builder.put(grammarAccess.getMaxPlusMatrixAccess().getLabelsAssignment_1(), "rule__MaxPlusMatrix__LabelsAssignment_1");
			builder.put(grammarAccess.getMaxPlusMatrixAccess().getRowsAssignment_4_0(), "rule__MaxPlusMatrix__RowsAssignment_4_0");
			builder.put(grammarAccess.getRowAccess().getElementsAssignment_1_0(), "rule__Row__ElementsAssignment_1_0");
			builder.put(grammarAccess.getVectorSequenceAccess().getNameAssignment_0(), "rule__VectorSequence__NameAssignment_0");
			builder.put(grammarAccess.getVectorSequenceAccess().getLabelsAssignment_1(), "rule__VectorSequence__LabelsAssignment_1");
			builder.put(grammarAccess.getVectorSequenceAccess().getVectorsAssignment_4_0(), "rule__VectorSequence__VectorsAssignment_4_0");
			builder.put(grammarAccess.getEventSequenceAccess().getNameAssignment_0(), "rule__EventSequence__NameAssignment_0");
			builder.put(grammarAccess.getEventSequenceAccess().getSequenceAssignment_2(), "rule__EventSequence__SequenceAssignment_2");
			builder.put(grammarAccess.getLabelsAccess().getLabelAssignment_1_0(), "rule__Labels__LabelAssignment_1_0");
			builder.put(grammarAccess.getElementAccess().getNumAssignment_0(), "rule__Element__NumAssignment_0");
			builder.put(grammarAccess.getElementAccess().getInfAssignment_1(), "rule__Element__InfAssignment_1");
			builder.put(grammarAccess.getNumberAccess().getRatioAssignment_0(), "rule__Number__RatioAssignment_0");
			builder.put(grammarAccess.getNumberAccess().getValueAssignment_1(), "rule__Number__ValueAssignment_1");
			builder.put(grammarAccess.getRatioAccess().getNumeratorAssignment_0(), "rule__Ratio__NumeratorAssignment_0");
			builder.put(grammarAccess.getRatioAccess().getDenominatorAssignment_2(), "rule__Ratio__DenominatorAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MaxPlusMatrixGrammarAccess grammarAccess;

	@Override
	protected InternalMaxPlusMatrixParser createParser() {
		InternalMaxPlusMatrixParser result = new InternalMaxPlusMatrixParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MaxPlusMatrixGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MaxPlusMatrixGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
