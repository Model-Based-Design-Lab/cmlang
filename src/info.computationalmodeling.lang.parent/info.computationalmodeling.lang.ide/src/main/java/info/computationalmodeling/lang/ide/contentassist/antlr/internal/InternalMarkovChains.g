/*
 * generated by Xtext 2.29.0
 */
grammar InternalMarkovChains;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package info.computationalmodeling.lang.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package info.computationalmodeling.lang.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import info.computationalmodeling.lang.services.MarkovChainsGrammarAccess;

}
@parser::members {
	private MarkovChainsGrammarAccess grammarAccess;

	public void setGrammarAccess(MarkovChainsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMarkovChainModel
entryRuleMarkovChainModel
:
{ before(grammarAccess.getMarkovChainModelRule()); }
	 ruleMarkovChainModel
{ after(grammarAccess.getMarkovChainModelRule()); } 
	 EOF 
;

// Rule MarkovChainModel
ruleMarkovChainModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMarkovChainModelAccess().getGroup()); }
		(rule__MarkovChainModel__Group__0)
		{ after(grammarAccess.getMarkovChainModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEdge
entryRuleEdge
:
{ before(grammarAccess.getEdgeRule()); }
	 ruleEdge
{ after(grammarAccess.getEdgeRule()); } 
	 EOF 
;

// Rule Edge
ruleEdge 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEdgeAccess().getAlternatives()); }
		(rule__Edge__Alternatives)
		{ after(grammarAccess.getEdgeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEdgeSpecs
entryRuleEdgeSpecs
:
{ before(grammarAccess.getEdgeSpecsRule()); }
	 ruleEdgeSpecs
{ after(grammarAccess.getEdgeSpecsRule()); } 
	 EOF 
;

// Rule EdgeSpecs
ruleEdgeSpecs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEdgeSpecsAccess().getGroup()); }
		(rule__EdgeSpecs__Group__0)
		{ after(grammarAccess.getEdgeSpecsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEdgeAnnotation
entryRuleEdgeAnnotation
:
{ before(grammarAccess.getEdgeAnnotationRule()); }
	 ruleEdgeAnnotation
{ after(grammarAccess.getEdgeAnnotationRule()); } 
	 EOF 
;

// Rule EdgeAnnotation
ruleEdgeAnnotation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEdgeAnnotationAccess().getAlternatives()); }
		(rule__EdgeAnnotation__Alternatives)
		{ after(grammarAccess.getEdgeAnnotationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAccess().getGroup()); }
		(rule__State__Group__0)
		{ after(grammarAccess.getStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStateSpecs
entryRuleStateSpecs
:
{ before(grammarAccess.getStateSpecsRule()); }
	 ruleStateSpecs
{ after(grammarAccess.getStateSpecsRule()); } 
	 EOF 
;

// Rule StateSpecs
ruleStateSpecs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateSpecsAccess().getGroup()); }
		(rule__StateSpecs__Group__0)
		{ after(grammarAccess.getStateSpecsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStateAnnotation
entryRuleStateAnnotation
:
{ before(grammarAccess.getStateAnnotationRule()); }
	 ruleStateAnnotation
{ after(grammarAccess.getStateAnnotationRule()); } 
	 EOF 
;

// Rule StateAnnotation
ruleStateAnnotation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAnnotationAccess().getAlternatives()); }
		(rule__StateAnnotation__Alternatives)
		{ after(grammarAccess.getStateAnnotationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProbability
entryRuleProbability
:
{ before(grammarAccess.getProbabilityRule()); }
	 ruleProbability
{ after(grammarAccess.getProbabilityRule()); } 
	 EOF 
;

// Rule Probability
ruleProbability 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProbabilityAccess().getAlternatives()); }
		(rule__Probability__Alternatives)
		{ after(grammarAccess.getProbabilityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePosRatio
entryRulePosRatio
:
{ before(grammarAccess.getPosRatioRule()); }
	 rulePosRatio
{ after(grammarAccess.getPosRatioRule()); } 
	 EOF 
;

// Rule PosRatio
rulePosRatio 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPosRatioAccess().getGroup()); }
		(rule__PosRatio__Group__0)
		{ after(grammarAccess.getPosRatioAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReward
entryRuleReward
:
{ before(grammarAccess.getRewardRule()); }
	 ruleReward
{ after(grammarAccess.getRewardRule()); } 
	 EOF 
;

// Rule Reward
ruleReward 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRewardAccess().getAlternatives()); }
		(rule__Reward__Alternatives)
		{ after(grammarAccess.getRewardAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePosNegRatio
entryRulePosNegRatio
:
{ before(grammarAccess.getPosNegRatioRule()); }
	 rulePosNegRatio
{ after(grammarAccess.getPosNegRatioRule()); } 
	 EOF 
;

// Rule PosNegRatio
rulePosNegRatio 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPosNegRatioAccess().getGroup()); }
		(rule__PosNegRatio__Group__0)
		{ after(grammarAccess.getPosNegRatioAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeAccess().getGroup_0()); }
		(rule__Edge__Group_0__0)
		{ after(grammarAccess.getEdgeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getEdgeAccess().getGroup_1()); }
		(rule__Edge__Group_1__0)
		{ after(grammarAccess.getEdgeAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeAnnotation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeAnnotationAccess().getGroup_0()); }
		(rule__EdgeAnnotation__Group_0__0)
		{ after(grammarAccess.getEdgeAnnotationAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getEdgeAnnotationAccess().getProbabilityAssignment_1()); }
		(rule__EdgeAnnotation__ProbabilityAssignment_1)
		{ after(grammarAccess.getEdgeAnnotationAccess().getProbabilityAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAnnotationAccess().getGroup_0()); }
		(rule__StateAnnotation__Group_0__0)
		{ after(grammarAccess.getStateAnnotationAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getStateAnnotationAccess().getGroup_1()); }
		(rule__StateAnnotation__Group_1__0)
		{ after(grammarAccess.getStateAnnotationAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Alternatives_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAnnotationAccess().getGroup_0_0_0_0()); }
		(rule__StateAnnotation__Group_0_0_0_0__0)
		{ after(grammarAccess.getStateAnnotationAccess().getGroup_0_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStateAnnotationAccess().getPKeyword_0_0_0_1()); }
		'p'
		{ after(grammarAccess.getStateAnnotationAccess().getPKeyword_0_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Alternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAnnotationAccess().getRewardKeyword_1_0_0_0()); }
		'reward'
		{ after(grammarAccess.getStateAnnotationAccess().getRewardKeyword_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStateAnnotationAccess().getRKeyword_1_0_0_1()); }
		'r'
		{ after(grammarAccess.getStateAnnotationAccess().getRKeyword_1_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Probability__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProbabilityAccess().getRatioAssignment_0()); }
		(rule__Probability__RatioAssignment_0)
		{ after(grammarAccess.getProbabilityAccess().getRatioAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getProbabilityAccess().getFloatAssignment_1()); }
		(rule__Probability__FloatAssignment_1)
		{ after(grammarAccess.getProbabilityAccess().getFloatAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getProbabilityAccess().getIntAssignment_2()); }
		(rule__Probability__IntAssignment_2)
		{ after(grammarAccess.getProbabilityAccess().getIntAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reward__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRewardAccess().getRatioAssignment_0()); }
		(rule__Reward__RatioAssignment_0)
		{ after(grammarAccess.getRewardAccess().getRatioAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getRewardAccess().getFloatAssignment_1()); }
		(rule__Reward__FloatAssignment_1)
		{ after(grammarAccess.getRewardAccess().getFloatAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getRewardAccess().getIntAssignment_2()); }
		(rule__Reward__IntAssignment_2)
		{ after(grammarAccess.getRewardAccess().getIntAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getRewardAccess().getNegintAssignment_3()); }
		(rule__Reward__NegintAssignment_3)
		{ after(grammarAccess.getRewardAccess().getNegintAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PosNegRatio__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPosNegRatioAccess().getNumeratorAssignment_0_0()); }
		(rule__PosNegRatio__NumeratorAssignment_0_0)
		{ after(grammarAccess.getPosNegRatioAccess().getNumeratorAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPosNegRatioAccess().getNegnumeratorAssignment_0_1()); }
		(rule__PosNegRatio__NegnumeratorAssignment_0_1)
		{ after(grammarAccess.getPosNegRatioAccess().getNegnumeratorAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkovChainModel__Group__0__Impl
	rule__MarkovChainModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkovChainModelAccess().getGroup_0()); }
	(rule__MarkovChainModel__Group_0__0)?
	{ after(grammarAccess.getMarkovChainModelAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkovChainModel__Group__1__Impl
	rule__MarkovChainModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkovChainModelAccess().getMarkovKeyword_1()); }
	'markov'
	{ after(grammarAccess.getMarkovChainModelAccess().getMarkovKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkovChainModel__Group__2__Impl
	rule__MarkovChainModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkovChainModelAccess().getChainKeyword_2()); }
	'chain'
	{ after(grammarAccess.getMarkovChainModelAccess().getChainKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkovChainModel__Group__3__Impl
	rule__MarkovChainModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkovChainModelAccess().getNameAssignment_3()); }
	(rule__MarkovChainModel__NameAssignment_3)
	{ after(grammarAccess.getMarkovChainModelAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkovChainModel__Group__4__Impl
	rule__MarkovChainModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkovChainModelAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getMarkovChainModelAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkovChainModel__Group__5__Impl
	rule__MarkovChainModel__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkovChainModelAccess().getEdgesAssignment_5()); }
	(rule__MarkovChainModel__EdgesAssignment_5)*
	{ after(grammarAccess.getMarkovChainModelAccess().getEdgesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkovChainModel__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkovChainModelAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getMarkovChainModelAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MarkovChainModel__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkovChainModel__Group_0__0__Impl
	rule__MarkovChainModel__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkovChainModelAccess().getAuthorKeyword_0_0()); }
	'author'
	{ after(grammarAccess.getMarkovChainModelAccess().getAuthorKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkovChainModel__Group_0__1__Impl
	rule__MarkovChainModel__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkovChainModelAccess().getEqualsSignKeyword_0_1()); }
	'='
	{ after(grammarAccess.getMarkovChainModelAccess().getEqualsSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MarkovChainModel__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkovChainModelAccess().getAuthorAssignment_0_2()); }
	(rule__MarkovChainModel__AuthorAssignment_0_2)
	{ after(grammarAccess.getMarkovChainModelAccess().getAuthorAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Edge__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group_0__0__Impl
	rule__Edge__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAccess().getSrcstateAssignment_0_0()); }
	(rule__Edge__SrcstateAssignment_0_0)
	{ after(grammarAccess.getEdgeAccess().getSrcstateAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group_0__1__Impl
	rule__Edge__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAccess().getHyphenMinusKeyword_0_1()); }
	('-')*
	{ after(grammarAccess.getEdgeAccess().getHyphenMinusKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group_0__2__Impl
	rule__Edge__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAccess().getHyphenMinusGreaterThanSignKeyword_0_2()); }
	'->'
	{ after(grammarAccess.getEdgeAccess().getHyphenMinusGreaterThanSignKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAccess().getDststateAssignment_0_3()); }
	(rule__Edge__DststateAssignment_0_3)
	{ after(grammarAccess.getEdgeAccess().getDststateAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Edge__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group_1__0__Impl
	rule__Edge__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAccess().getSrcstateAssignment_1_0()); }
	(rule__Edge__SrcstateAssignment_1_0)
	{ after(grammarAccess.getEdgeAccess().getSrcstateAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group_1__1__Impl
	rule__Edge__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getEdgeAccess().getHyphenMinusKeyword_1_1()); }
		('-')
		{ after(grammarAccess.getEdgeAccess().getHyphenMinusKeyword_1_1()); }
	)
	(
		{ before(grammarAccess.getEdgeAccess().getHyphenMinusKeyword_1_1()); }
		('-')*
		{ after(grammarAccess.getEdgeAccess().getHyphenMinusKeyword_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group_1__2__Impl
	rule__Edge__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAccess().getSpecsAssignment_1_2()); }
	(rule__Edge__SpecsAssignment_1_2)
	{ after(grammarAccess.getEdgeAccess().getSpecsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group_1__3__Impl
	rule__Edge__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAccess().getHyphenMinusKeyword_1_3()); }
	('-')*
	{ after(grammarAccess.getEdgeAccess().getHyphenMinusKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group_1__4__Impl
	rule__Edge__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAccess().getHyphenMinusGreaterThanSignKeyword_1_4()); }
	'->'
	{ after(grammarAccess.getEdgeAccess().getHyphenMinusGreaterThanSignKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Edge__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAccess().getDststateAssignment_1_5()); }
	(rule__Edge__DststateAssignment_1_5)
	{ after(grammarAccess.getEdgeAccess().getDststateAssignment_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeSpecs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeSpecs__Group__0__Impl
	rule__EdgeSpecs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeSpecs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeSpecsAccess().getEdgeSpecsAction_0()); }
	()
	{ after(grammarAccess.getEdgeSpecsAccess().getEdgeSpecsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeSpecs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeSpecs__Group__1__Impl
	rule__EdgeSpecs__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeSpecs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeSpecsAccess().getAnnotationsAssignment_1()); }
	(rule__EdgeSpecs__AnnotationsAssignment_1)
	{ after(grammarAccess.getEdgeSpecsAccess().getAnnotationsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeSpecs__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeSpecs__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeSpecs__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeSpecsAccess().getGroup_2()); }
	(rule__EdgeSpecs__Group_2__0)*
	{ after(grammarAccess.getEdgeSpecsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeSpecs__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeSpecs__Group_2__0__Impl
	rule__EdgeSpecs__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeSpecs__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeSpecsAccess().getSemicolonKeyword_2_0()); }
	';'
	{ after(grammarAccess.getEdgeSpecsAccess().getSemicolonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeSpecs__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeSpecs__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeSpecs__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeSpecsAccess().getAnnotationsAssignment_2_1()); }
	(rule__EdgeSpecs__AnnotationsAssignment_2_1)
	{ after(grammarAccess.getEdgeSpecsAccess().getAnnotationsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeAnnotation__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeAnnotation__Group_0__0__Impl
	rule__EdgeAnnotation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeAnnotation__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAnnotationAccess().getProbabilityKeyword_0_0()); }
	'probability'
	{ after(grammarAccess.getEdgeAnnotationAccess().getProbabilityKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeAnnotation__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeAnnotation__Group_0__1__Impl
	rule__EdgeAnnotation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeAnnotation__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAnnotationAccess().getColonKeyword_0_1()); }
	':'
	{ after(grammarAccess.getEdgeAnnotationAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeAnnotation__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeAnnotation__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeAnnotation__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeAnnotationAccess().getProbabilityAssignment_0_2()); }
	(rule__EdgeAnnotation__ProbabilityAssignment_0_2)
	{ after(grammarAccess.getEdgeAnnotationAccess().getProbabilityAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getNameAssignment_0()); }
	(rule__State__NameAssignment_0)
	{ after(grammarAccess.getStateAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getSpecsAssignment_1()); }
	(rule__State__SpecsAssignment_1)?
	{ after(grammarAccess.getStateAccess().getSpecsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateSpecs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateSpecs__Group__0__Impl
	rule__StateSpecs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateSpecsAccess().getStateSpecsAction_0()); }
	()
	{ after(grammarAccess.getStateSpecsAccess().getStateSpecsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateSpecs__Group__1__Impl
	rule__StateSpecs__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateSpecsAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getStateSpecsAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateSpecs__Group__2__Impl
	rule__StateSpecs__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateSpecsAccess().getAnnotationsAssignment_2()); }
	(rule__StateSpecs__AnnotationsAssignment_2)
	{ after(grammarAccess.getStateSpecsAccess().getAnnotationsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateSpecs__Group__3__Impl
	rule__StateSpecs__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateSpecsAccess().getGroup_3()); }
	(rule__StateSpecs__Group_3__0)*
	{ after(grammarAccess.getStateSpecsAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateSpecs__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateSpecsAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getStateSpecsAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateSpecs__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateSpecs__Group_3__0__Impl
	rule__StateSpecs__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateSpecsAccess().getSemicolonKeyword_3_0()); }
	';'
	{ after(grammarAccess.getStateSpecsAccess().getSemicolonKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateSpecs__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateSpecsAccess().getAnnotationsAssignment_3_1()); }
	(rule__StateSpecs__AnnotationsAssignment_3_1)
	{ after(grammarAccess.getStateSpecsAccess().getAnnotationsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateAnnotation__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateAnnotation__Group_0__0__Impl
	rule__StateAnnotation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAnnotationAccess().getGroup_0_0()); }
	(rule__StateAnnotation__Group_0_0__0)
	{ after(grammarAccess.getStateAnnotationAccess().getGroup_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateAnnotation__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAnnotationAccess().getInitprobAssignment_0_1()); }
	(rule__StateAnnotation__InitprobAssignment_0_1)
	{ after(grammarAccess.getStateAnnotationAccess().getInitprobAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateAnnotation__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateAnnotation__Group_0_0__0__Impl
	rule__StateAnnotation__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAnnotationAccess().getAlternatives_0_0_0()); }
	(rule__StateAnnotation__Alternatives_0_0_0)
	{ after(grammarAccess.getStateAnnotationAccess().getAlternatives_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateAnnotation__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAnnotationAccess().getColonKeyword_0_0_1()); }
	':'
	{ after(grammarAccess.getStateAnnotationAccess().getColonKeyword_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateAnnotation__Group_0_0_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateAnnotation__Group_0_0_0_0__0__Impl
	rule__StateAnnotation__Group_0_0_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_0_0_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAnnotationAccess().getInitialKeyword_0_0_0_0_0()); }
	'initial'
	{ after(grammarAccess.getStateAnnotationAccess().getInitialKeyword_0_0_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_0_0_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateAnnotation__Group_0_0_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_0_0_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAnnotationAccess().getProbabilityKeyword_0_0_0_0_1()); }
	'probability'
	{ after(grammarAccess.getStateAnnotationAccess().getProbabilityKeyword_0_0_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateAnnotation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateAnnotation__Group_1__0__Impl
	rule__StateAnnotation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAnnotationAccess().getGroup_1_0()); }
	(rule__StateAnnotation__Group_1_0__0)
	{ after(grammarAccess.getStateAnnotationAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateAnnotation__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAnnotationAccess().getRewardAssignment_1_1()); }
	(rule__StateAnnotation__RewardAssignment_1_1)
	{ after(grammarAccess.getStateAnnotationAccess().getRewardAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateAnnotation__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateAnnotation__Group_1_0__0__Impl
	rule__StateAnnotation__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAnnotationAccess().getAlternatives_1_0_0()); }
	(rule__StateAnnotation__Alternatives_1_0_0)
	{ after(grammarAccess.getStateAnnotationAccess().getAlternatives_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateAnnotation__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAnnotationAccess().getColonKeyword_1_0_1()); }
	':'
	{ after(grammarAccess.getStateAnnotationAccess().getColonKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PosRatio__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PosRatio__Group__0__Impl
	rule__PosRatio__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PosRatio__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPosRatioAccess().getNumeratorAssignment_0()); }
	(rule__PosRatio__NumeratorAssignment_0)
	{ after(grammarAccess.getPosRatioAccess().getNumeratorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PosRatio__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PosRatio__Group__1__Impl
	rule__PosRatio__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PosRatio__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPosRatioAccess().getSolidusKeyword_1()); }
	'/'
	{ after(grammarAccess.getPosRatioAccess().getSolidusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PosRatio__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PosRatio__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PosRatio__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPosRatioAccess().getDenominatorAssignment_2()); }
	(rule__PosRatio__DenominatorAssignment_2)
	{ after(grammarAccess.getPosRatioAccess().getDenominatorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PosNegRatio__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PosNegRatio__Group__0__Impl
	rule__PosNegRatio__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PosNegRatio__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPosNegRatioAccess().getAlternatives_0()); }
	(rule__PosNegRatio__Alternatives_0)
	{ after(grammarAccess.getPosNegRatioAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PosNegRatio__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PosNegRatio__Group__1__Impl
	rule__PosNegRatio__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PosNegRatio__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPosNegRatioAccess().getSolidusKeyword_1()); }
	'/'
	{ after(grammarAccess.getPosNegRatioAccess().getSolidusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PosNegRatio__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PosNegRatio__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PosNegRatio__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPosNegRatioAccess().getDenominatorAssignment_2()); }
	(rule__PosNegRatio__DenominatorAssignment_2)
	{ after(grammarAccess.getPosNegRatioAccess().getDenominatorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MarkovChainModel__AuthorAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkovChainModelAccess().getAuthorIDTerminalRuleCall_0_2_0()); }
		RULE_ID
		{ after(grammarAccess.getMarkovChainModelAccess().getAuthorIDTerminalRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkovChainModelAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getMarkovChainModelAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MarkovChainModel__EdgesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkovChainModelAccess().getEdgesEdgeParserRuleCall_5_0()); }
		ruleEdge
		{ after(grammarAccess.getMarkovChainModelAccess().getEdgesEdgeParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__SrcstateAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeAccess().getSrcstateStateParserRuleCall_0_0_0()); }
		ruleState
		{ after(grammarAccess.getEdgeAccess().getSrcstateStateParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__DststateAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeAccess().getDststateStateParserRuleCall_0_3_0()); }
		ruleState
		{ after(grammarAccess.getEdgeAccess().getDststateStateParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__SrcstateAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeAccess().getSrcstateStateParserRuleCall_1_0_0()); }
		ruleState
		{ after(grammarAccess.getEdgeAccess().getSrcstateStateParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__SpecsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeAccess().getSpecsEdgeSpecsParserRuleCall_1_2_0()); }
		ruleEdgeSpecs
		{ after(grammarAccess.getEdgeAccess().getSpecsEdgeSpecsParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge__DststateAssignment_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeAccess().getDststateStateParserRuleCall_1_5_0()); }
		ruleState
		{ after(grammarAccess.getEdgeAccess().getDststateStateParserRuleCall_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeSpecs__AnnotationsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeSpecsAccess().getAnnotationsEdgeAnnotationParserRuleCall_1_0()); }
		ruleEdgeAnnotation
		{ after(grammarAccess.getEdgeSpecsAccess().getAnnotationsEdgeAnnotationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeSpecs__AnnotationsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeSpecsAccess().getAnnotationsEdgeAnnotationParserRuleCall_2_1_0()); }
		ruleEdgeAnnotation
		{ after(grammarAccess.getEdgeSpecsAccess().getAnnotationsEdgeAnnotationParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeAnnotation__ProbabilityAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeAnnotationAccess().getProbabilityProbabilityParserRuleCall_0_2_0()); }
		ruleProbability
		{ after(grammarAccess.getEdgeAnnotationAccess().getProbabilityProbabilityParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeAnnotation__ProbabilityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeAnnotationAccess().getProbabilityProbabilityParserRuleCall_1_0()); }
		ruleProbability
		{ after(grammarAccess.getEdgeAnnotationAccess().getProbabilityProbabilityParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__SpecsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getSpecsStateSpecsParserRuleCall_1_0()); }
		ruleStateSpecs
		{ after(grammarAccess.getStateAccess().getSpecsStateSpecsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__AnnotationsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateSpecsAccess().getAnnotationsStateAnnotationParserRuleCall_2_0()); }
		ruleStateAnnotation
		{ after(grammarAccess.getStateSpecsAccess().getAnnotationsStateAnnotationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateSpecs__AnnotationsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateSpecsAccess().getAnnotationsStateAnnotationParserRuleCall_3_1_0()); }
		ruleStateAnnotation
		{ after(grammarAccess.getStateSpecsAccess().getAnnotationsStateAnnotationParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__InitprobAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAnnotationAccess().getInitprobProbabilityParserRuleCall_0_1_0()); }
		ruleProbability
		{ after(grammarAccess.getStateAnnotationAccess().getInitprobProbabilityParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateAnnotation__RewardAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAnnotationAccess().getRewardRewardParserRuleCall_1_1_0()); }
		ruleReward
		{ after(grammarAccess.getStateAnnotationAccess().getRewardRewardParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Probability__RatioAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProbabilityAccess().getRatioPosRatioParserRuleCall_0_0()); }
		rulePosRatio
		{ after(grammarAccess.getProbabilityAccess().getRatioPosRatioParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Probability__FloatAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProbabilityAccess().getFloatFloatTerminalRuleCall_1_0()); }
		RULE_FLOAT
		{ after(grammarAccess.getProbabilityAccess().getFloatFloatTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Probability__IntAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProbabilityAccess().getIntINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getProbabilityAccess().getIntINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PosRatio__NumeratorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPosRatioAccess().getNumeratorINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getPosRatioAccess().getNumeratorINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PosRatio__DenominatorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPosRatioAccess().getDenominatorINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getPosRatioAccess().getDenominatorINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reward__RatioAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRewardAccess().getRatioPosNegRatioParserRuleCall_0_0()); }
		rulePosNegRatio
		{ after(grammarAccess.getRewardAccess().getRatioPosNegRatioParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reward__FloatAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRewardAccess().getFloatFloatTerminalRuleCall_1_0()); }
		RULE_FLOAT
		{ after(grammarAccess.getRewardAccess().getFloatFloatTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reward__IntAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRewardAccess().getIntINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getRewardAccess().getIntINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reward__NegintAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRewardAccess().getNegintNEGINTTerminalRuleCall_3_0()); }
		RULE_NEGINT
		{ after(grammarAccess.getRewardAccess().getNegintNEGINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PosNegRatio__NumeratorAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPosNegRatioAccess().getNumeratorINTTerminalRuleCall_0_0_0()); }
		RULE_INT
		{ after(grammarAccess.getPosNegRatioAccess().getNumeratorINTTerminalRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PosNegRatio__NegnumeratorAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPosNegRatioAccess().getNegnumeratorNEGINTTerminalRuleCall_0_1_0()); }
		RULE_NEGINT
		{ after(grammarAccess.getPosNegRatioAccess().getNegnumeratorNEGINTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PosNegRatio__DenominatorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPosNegRatioAccess().getDenominatorINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getPosNegRatioAccess().getDenominatorINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NEGINT : '-' RULE_INT;

RULE_FLOAT : '-'? RULE_INT? '.' RULE_INT (('E'|'e') '-'? RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
