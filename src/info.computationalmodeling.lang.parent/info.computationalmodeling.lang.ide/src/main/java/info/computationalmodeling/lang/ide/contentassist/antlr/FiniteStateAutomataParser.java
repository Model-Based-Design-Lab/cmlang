/*
 * generated by Xtext 2.29.0
 */
package info.computationalmodeling.lang.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import info.computationalmodeling.lang.ide.contentassist.antlr.internal.InternalFiniteStateAutomataParser;
import info.computationalmodeling.lang.services.FiniteStateAutomataGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class FiniteStateAutomataParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FiniteStateAutomataGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FiniteStateAutomataGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEdgeAccess().getAlternatives_1(), "rule__Edge__Alternatives_1");
			builder.put(grammarAccess.getEdgeSpecsAccess().getAlternatives_2_0(), "rule__EdgeSpecs__Alternatives_2_0");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getSymbolAlternatives_0(), "rule__EdgeAnnotation__SymbolAlternatives_0");
			builder.put(grammarAccess.getUndecoratedStateAccess().getAlternatives(), "rule__UndecoratedState__Alternatives");
			builder.put(grammarAccess.getStateSpecsAccess().getAlternatives(), "rule__StateSpecs__Alternatives");
			builder.put(grammarAccess.getStateAnnotationAccess().getAlternatives(), "rule__StateAnnotation__Alternatives");
			builder.put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
			builder.put(grammarAccess.getFiniteStateAutomatonModelAccess().getGroup(), "rule__FiniteStateAutomatonModel__Group__0");
			builder.put(grammarAccess.getFiniteStateAutomatonModelAccess().getGroup_0(), "rule__FiniteStateAutomatonModel__Group_0__0");
			builder.put(grammarAccess.getFiniteStateAutomatonModelAccess().getGroup_7(), "rule__FiniteStateAutomatonModel__Group_7__0");
			builder.put(grammarAccess.getEdgeAccess().getGroup(), "rule__Edge__Group__0");
			builder.put(grammarAccess.getEdgeAccess().getGroup_1_0(), "rule__Edge__Group_1_0__0");
			builder.put(grammarAccess.getEdgeAccess().getGroup_1_1(), "rule__Edge__Group_1_1__0");
			builder.put(grammarAccess.getEdgeSpecsAccess().getGroup(), "rule__EdgeSpecs__Group__0");
			builder.put(grammarAccess.getEdgeSpecsAccess().getGroup_2(), "rule__EdgeSpecs__Group_2__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getStateSetAccess().getGroup(), "rule__StateSet__Group__0");
			builder.put(grammarAccess.getStateSetAccess().getGroup_3(), "rule__StateSet__Group_3__0");
			builder.put(grammarAccess.getStateTupleAccess().getGroup(), "rule__StateTuple__Group__0");
			builder.put(grammarAccess.getStateTupleAccess().getGroup_3(), "rule__StateTuple__Group_3__0");
			builder.put(grammarAccess.getStateSpecsAccess().getGroup_0(), "rule__StateSpecs__Group_0__0");
			builder.put(grammarAccess.getStateSpecsAccess().getGroup_0_1(), "rule__StateSpecs__Group_0_1__0");
			builder.put(grammarAccess.getStateSpecsAccess().getGroup_0_1_2(), "rule__StateSpecs__Group_0_1_2__0");
			builder.put(grammarAccess.getStateSpecsAccess().getGroup_1(), "rule__StateSpecs__Group_1__0");
			builder.put(grammarAccess.getStateSpecsAccess().getGroup_1_1(), "rule__StateSpecs__Group_1_1__0");
			builder.put(grammarAccess.getStateAnnotationAccess().getGroup_1(), "rule__StateAnnotation__Group_1__0");
			builder.put(grammarAccess.getStateAnnotationAccess().getGroup_1_1(), "rule__StateAnnotation__Group_1_1__0");
			builder.put(grammarAccess.getStateAnnotationAccess().getGroup_1_1_2(), "rule__StateAnnotation__Group_1_1_2__0");
			builder.put(grammarAccess.getFloatAccess().getGroup(), "rule__Float__Group__0");
			builder.put(grammarAccess.getFiniteStateAutomatonModelAccess().getAuthorAssignment_0_2(), "rule__FiniteStateAutomatonModel__AuthorAssignment_0_2");
			builder.put(grammarAccess.getFiniteStateAutomatonModelAccess().getNameAssignment_4(), "rule__FiniteStateAutomatonModel__NameAssignment_4");
			builder.put(grammarAccess.getFiniteStateAutomatonModelAccess().getEdgesAssignment_6(), "rule__FiniteStateAutomatonModel__EdgesAssignment_6");
			builder.put(grammarAccess.getFiniteStateAutomatonModelAccess().getStatesAssignment_7_1(), "rule__FiniteStateAutomatonModel__StatesAssignment_7_1");
			builder.put(grammarAccess.getEdgeAccess().getSrcstateAssignment_0(), "rule__Edge__SrcstateAssignment_0");
			builder.put(grammarAccess.getEdgeAccess().getDststateAssignment_1_0_2(), "rule__Edge__DststateAssignment_1_0_2");
			builder.put(grammarAccess.getEdgeAccess().getSpecsAssignment_1_1_1(), "rule__Edge__SpecsAssignment_1_1_1");
			builder.put(grammarAccess.getEdgeAccess().getDststateAssignment_1_1_4(), "rule__Edge__DststateAssignment_1_1_4");
			builder.put(grammarAccess.getEdgeSpecsAccess().getAnnotationsAssignment_1(), "rule__EdgeSpecs__AnnotationsAssignment_1");
			builder.put(grammarAccess.getEdgeSpecsAccess().getAnnotationsAssignment_2_1(), "rule__EdgeSpecs__AnnotationsAssignment_2_1");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getSymbolAssignment(), "rule__EdgeAnnotation__SymbolAssignment");
			builder.put(grammarAccess.getStateAccess().getUstateAssignment_0(), "rule__State__UstateAssignment_0");
			builder.put(grammarAccess.getStateAccess().getSpecsAssignment_1(), "rule__State__SpecsAssignment_1");
			builder.put(grammarAccess.getUndecoratedStateAccess().getNameAssignment_0(), "rule__UndecoratedState__NameAssignment_0");
			builder.put(grammarAccess.getUndecoratedStateAccess().getStateSetAssignment_1(), "rule__UndecoratedState__StateSetAssignment_1");
			builder.put(grammarAccess.getUndecoratedStateAccess().getStateTupleAssignment_2(), "rule__UndecoratedState__StateTupleAssignment_2");
			builder.put(grammarAccess.getStateSetAccess().getStatesAssignment_2(), "rule__StateSet__StatesAssignment_2");
			builder.put(grammarAccess.getStateSetAccess().getStatesAssignment_3_1(), "rule__StateSet__StatesAssignment_3_1");
			builder.put(grammarAccess.getStateTupleAccess().getStatesAssignment_2(), "rule__StateTuple__StatesAssignment_2");
			builder.put(grammarAccess.getStateTupleAccess().getStatesAssignment_3_1(), "rule__StateTuple__StatesAssignment_3_1");
			builder.put(grammarAccess.getStateSpecsAccess().getAnnotationsAssignment_0_1_1(), "rule__StateSpecs__AnnotationsAssignment_0_1_1");
			builder.put(grammarAccess.getStateSpecsAccess().getAnnotationsAssignment_0_1_2_1(), "rule__StateSpecs__AnnotationsAssignment_0_1_2_1");
			builder.put(grammarAccess.getStateSpecsAccess().getAnnotationsAssignment_1_0(), "rule__StateSpecs__AnnotationsAssignment_1_0");
			builder.put(grammarAccess.getStateSpecsAccess().getAnnotationsAssignment_1_1_1(), "rule__StateSpecs__AnnotationsAssignment_1_1_1");
			builder.put(grammarAccess.getStateAnnotationAccess().getInitialAssignment_0(), "rule__StateAnnotation__InitialAssignment_0");
			builder.put(grammarAccess.getStateAnnotationAccess().getFinalAssignment_1_0(), "rule__StateAnnotation__FinalAssignment_1_0");
			builder.put(grammarAccess.getStateAnnotationAccess().getAcceptanceSetsAssignment_1_1_1(), "rule__StateAnnotation__AcceptanceSetsAssignment_1_1_1");
			builder.put(grammarAccess.getStateAnnotationAccess().getAcceptanceSetsAssignment_1_1_2_1(), "rule__StateAnnotation__AcceptanceSetsAssignment_1_1_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FiniteStateAutomataGrammarAccess grammarAccess;

	@Override
	protected InternalFiniteStateAutomataParser createParser() {
		InternalFiniteStateAutomataParser result = new InternalFiniteStateAutomataParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FiniteStateAutomataGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FiniteStateAutomataGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
