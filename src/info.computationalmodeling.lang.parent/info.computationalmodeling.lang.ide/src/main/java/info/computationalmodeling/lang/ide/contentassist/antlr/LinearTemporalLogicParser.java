/*
 * generated by Xtext 2.29.0
 */
package info.computationalmodeling.lang.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import info.computationalmodeling.lang.ide.contentassist.antlr.internal.InternalLinearTemporalLogicParser;
import info.computationalmodeling.lang.services.LinearTemporalLogicGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class LinearTemporalLogicParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LinearTemporalLogicGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LinearTemporalLogicGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLTLFormula5Access().getAlternatives(), "rule__LTLFormula5__Alternatives");
			builder.put(grammarAccess.getLTLFormula6Access().getAlternatives(), "rule__LTLFormula6__Alternatives");
			builder.put(grammarAccess.getPropositionAccess().getAlternatives(), "rule__Proposition__Alternatives");
			builder.put(grammarAccess.getLTLModelAccess().getGroup(), "rule__LTLModel__Group__0");
			builder.put(grammarAccess.getLTLModelAccess().getGroup_5(), "rule__LTLModel__Group_5__0");
			builder.put(grammarAccess.getLTLModelAccess().getGroup_6(), "rule__LTLModel__Group_6__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
			builder.put(grammarAccess.getSetOfSymbolsAccess().getGroup(), "rule__SetOfSymbols__Group__0");
			builder.put(grammarAccess.getSetOfSymbolsAccess().getGroup_2(), "rule__SetOfSymbols__Group_2__0");
			builder.put(grammarAccess.getLTLFormulaAccess().getGroup(), "rule__LTLFormula__Group__0");
			builder.put(grammarAccess.getLTLFormulaAccess().getGroup_1(), "rule__LTLFormula__Group_1__0");
			builder.put(grammarAccess.getLTLFormulaAccess().getGroup_1_2(), "rule__LTLFormula__Group_1_2__0");
			builder.put(grammarAccess.getLTLFormula1Access().getGroup(), "rule__LTLFormula1__Group__0");
			builder.put(grammarAccess.getLTLFormula1Access().getGroup_1(), "rule__LTLFormula1__Group_1__0");
			builder.put(grammarAccess.getLTLFormula1Access().getGroup_1_2(), "rule__LTLFormula1__Group_1_2__0");
			builder.put(grammarAccess.getLTLFormula2Access().getGroup(), "rule__LTLFormula2__Group__0");
			builder.put(grammarAccess.getLTLFormula2Access().getGroup_1(), "rule__LTLFormula2__Group_1__0");
			builder.put(grammarAccess.getLTLFormula3Access().getGroup(), "rule__LTLFormula3__Group__0");
			builder.put(grammarAccess.getLTLFormula3Access().getGroup_1(), "rule__LTLFormula3__Group_1__0");
			builder.put(grammarAccess.getLTLFormula4Access().getGroup(), "rule__LTLFormula4__Group__0");
			builder.put(grammarAccess.getLTLFormula4Access().getGroup_1(), "rule__LTLFormula4__Group_1__0");
			builder.put(grammarAccess.getLTLFormula5Access().getGroup_0(), "rule__LTLFormula5__Group_0__0");
			builder.put(grammarAccess.getLTLFormula5Access().getGroup_1(), "rule__LTLFormula5__Group_1__0");
			builder.put(grammarAccess.getLTLFormula5Access().getGroup_2(), "rule__LTLFormula5__Group_2__0");
			builder.put(grammarAccess.getLTLFormula5Access().getGroup_3(), "rule__LTLFormula5__Group_3__0");
			builder.put(grammarAccess.getLTLFormula6Access().getGroup_3(), "rule__LTLFormula6__Group_3__0");
			builder.put(grammarAccess.getLTLModelAccess().getNameAssignment_2(), "rule__LTLModel__NameAssignment_2");
			builder.put(grammarAccess.getLTLModelAccess().getFormulaAssignment_4(), "rule__LTLModel__FormulaAssignment_4");
			builder.put(grammarAccess.getLTLModelAccess().getAlphabetAssignment_5_1(), "rule__LTLModel__AlphabetAssignment_5_1");
			builder.put(grammarAccess.getLTLModelAccess().getDefinitionsAssignment_6_1(), "rule__LTLModel__DefinitionsAssignment_6_1");
			builder.put(grammarAccess.getDefinitionAccess().getPropositionAssignment_0(), "rule__Definition__PropositionAssignment_0");
			builder.put(grammarAccess.getDefinitionAccess().getSymbolsAssignment_2(), "rule__Definition__SymbolsAssignment_2");
			builder.put(grammarAccess.getSetOfSymbolsAccess().getSymbolsAssignment_1(), "rule__SetOfSymbols__SymbolsAssignment_1");
			builder.put(grammarAccess.getSetOfSymbolsAccess().getSymbolsAssignment_2_1(), "rule__SetOfSymbols__SymbolsAssignment_2_1");
			builder.put(grammarAccess.getLTLFormulaAccess().getFormulaAssignment_0(), "rule__LTLFormula__FormulaAssignment_0");
			builder.put(grammarAccess.getLTLFormulaAccess().getAlternativesAssignment_1_1(), "rule__LTLFormula__AlternativesAssignment_1_1");
			builder.put(grammarAccess.getLTLFormulaAccess().getAlternativesAssignment_1_2_1(), "rule__LTLFormula__AlternativesAssignment_1_2_1");
			builder.put(grammarAccess.getLTLFormula1Access().getFormulaAssignment_0(), "rule__LTLFormula1__FormulaAssignment_0");
			builder.put(grammarAccess.getLTLFormula1Access().getAlternativesAssignment_1_1(), "rule__LTLFormula1__AlternativesAssignment_1_1");
			builder.put(grammarAccess.getLTLFormula1Access().getAlternativesAssignment_1_2_1(), "rule__LTLFormula1__AlternativesAssignment_1_2_1");
			builder.put(grammarAccess.getLTLFormula2Access().getSubexpression1Assignment_0(), "rule__LTLFormula2__Subexpression1Assignment_0");
			builder.put(grammarAccess.getLTLFormula2Access().getSubexpression2Assignment_1_1(), "rule__LTLFormula2__Subexpression2Assignment_1_1");
			builder.put(grammarAccess.getLTLFormula3Access().getSubexpression1Assignment_0(), "rule__LTLFormula3__Subexpression1Assignment_0");
			builder.put(grammarAccess.getLTLFormula3Access().getSubexpression2Assignment_1_1(), "rule__LTLFormula3__Subexpression2Assignment_1_1");
			builder.put(grammarAccess.getLTLFormula4Access().getSubexpressionAssignment_0(), "rule__LTLFormula4__SubexpressionAssignment_0");
			builder.put(grammarAccess.getLTLFormula4Access().getConsequenceAssignment_1_1(), "rule__LTLFormula4__ConsequenceAssignment_1_1");
			builder.put(grammarAccess.getLTLFormula5Access().getNextSubexpressionAssignment_0_1(), "rule__LTLFormula5__NextSubexpressionAssignment_0_1");
			builder.put(grammarAccess.getLTLFormula5Access().getEventuallySubexpressionAssignment_1_1(), "rule__LTLFormula5__EventuallySubexpressionAssignment_1_1");
			builder.put(grammarAccess.getLTLFormula5Access().getAlwaysSubexpressionAssignment_2_1(), "rule__LTLFormula5__AlwaysSubexpressionAssignment_2_1");
			builder.put(grammarAccess.getLTLFormula5Access().getNotSubexpressionAssignment_3_1(), "rule__LTLFormula5__NotSubexpressionAssignment_3_1");
			builder.put(grammarAccess.getLTLFormula5Access().getSubexpressionAssignment_4(), "rule__LTLFormula5__SubexpressionAssignment_4");
			builder.put(grammarAccess.getLTLFormula6Access().getPropositionExpressionAssignment_0(), "rule__LTLFormula6__PropositionExpressionAssignment_0");
			builder.put(grammarAccess.getLTLFormula6Access().getTrueExpressionAssignment_1(), "rule__LTLFormula6__TrueExpressionAssignment_1");
			builder.put(grammarAccess.getLTLFormula6Access().getFalseExpressionAssignment_2(), "rule__LTLFormula6__FalseExpressionAssignment_2");
			builder.put(grammarAccess.getLTLFormula6Access().getExpressionAssignment_3_1(), "rule__LTLFormula6__ExpressionAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LinearTemporalLogicGrammarAccess grammarAccess;

	@Override
	protected InternalLinearTemporalLogicParser createParser() {
		InternalLinearTemporalLogicParser result = new InternalLinearTemporalLogicParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LinearTemporalLogicGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LinearTemporalLogicGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
