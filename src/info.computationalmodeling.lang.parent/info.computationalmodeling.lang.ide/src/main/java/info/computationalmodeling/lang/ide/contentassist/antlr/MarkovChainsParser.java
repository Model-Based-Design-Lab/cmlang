/*
 * generated by Xtext 2.29.0
 */
package info.computationalmodeling.lang.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import info.computationalmodeling.lang.ide.contentassist.antlr.internal.InternalMarkovChainsParser;
import info.computationalmodeling.lang.services.MarkovChainsGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MarkovChainsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MarkovChainsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MarkovChainsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEdgeAccess().getAlternatives(), "rule__Edge__Alternatives");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getAlternatives(), "rule__EdgeAnnotation__Alternatives");
			builder.put(grammarAccess.getStateAnnotationAccess().getAlternatives(), "rule__StateAnnotation__Alternatives");
			builder.put(grammarAccess.getStateAnnotationAccess().getAlternatives_0_0_0(), "rule__StateAnnotation__Alternatives_0_0_0");
			builder.put(grammarAccess.getStateAnnotationAccess().getAlternatives_1_0_0(), "rule__StateAnnotation__Alternatives_1_0_0");
			builder.put(grammarAccess.getProbabilityAccess().getAlternatives(), "rule__Probability__Alternatives");
			builder.put(grammarAccess.getRewardAccess().getAlternatives(), "rule__Reward__Alternatives");
			builder.put(grammarAccess.getPosNegRatioAccess().getAlternatives_0(), "rule__PosNegRatio__Alternatives_0");
			builder.put(grammarAccess.getMarkovChainModelAccess().getGroup(), "rule__MarkovChainModel__Group__0");
			builder.put(grammarAccess.getMarkovChainModelAccess().getGroup_0(), "rule__MarkovChainModel__Group_0__0");
			builder.put(grammarAccess.getEdgeAccess().getGroup_0(), "rule__Edge__Group_0__0");
			builder.put(grammarAccess.getEdgeAccess().getGroup_1(), "rule__Edge__Group_1__0");
			builder.put(grammarAccess.getEdgeSpecsAccess().getGroup(), "rule__EdgeSpecs__Group__0");
			builder.put(grammarAccess.getEdgeSpecsAccess().getGroup_2(), "rule__EdgeSpecs__Group_2__0");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getGroup_0(), "rule__EdgeAnnotation__Group_0__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getStateSpecsAccess().getGroup(), "rule__StateSpecs__Group__0");
			builder.put(grammarAccess.getStateSpecsAccess().getGroup_3(), "rule__StateSpecs__Group_3__0");
			builder.put(grammarAccess.getStateAnnotationAccess().getGroup_0(), "rule__StateAnnotation__Group_0__0");
			builder.put(grammarAccess.getStateAnnotationAccess().getGroup_0_0(), "rule__StateAnnotation__Group_0_0__0");
			builder.put(grammarAccess.getStateAnnotationAccess().getGroup_0_0_0_0(), "rule__StateAnnotation__Group_0_0_0_0__0");
			builder.put(grammarAccess.getStateAnnotationAccess().getGroup_1(), "rule__StateAnnotation__Group_1__0");
			builder.put(grammarAccess.getStateAnnotationAccess().getGroup_1_0(), "rule__StateAnnotation__Group_1_0__0");
			builder.put(grammarAccess.getPosRatioAccess().getGroup(), "rule__PosRatio__Group__0");
			builder.put(grammarAccess.getPosNegRatioAccess().getGroup(), "rule__PosNegRatio__Group__0");
			builder.put(grammarAccess.getMarkovChainModelAccess().getAuthorAssignment_0_2(), "rule__MarkovChainModel__AuthorAssignment_0_2");
			builder.put(grammarAccess.getMarkovChainModelAccess().getNameAssignment_3(), "rule__MarkovChainModel__NameAssignment_3");
			builder.put(grammarAccess.getMarkovChainModelAccess().getEdgesAssignment_5(), "rule__MarkovChainModel__EdgesAssignment_5");
			builder.put(grammarAccess.getEdgeAccess().getSrcstateAssignment_0_0(), "rule__Edge__SrcstateAssignment_0_0");
			builder.put(grammarAccess.getEdgeAccess().getDststateAssignment_0_3(), "rule__Edge__DststateAssignment_0_3");
			builder.put(grammarAccess.getEdgeAccess().getSrcstateAssignment_1_0(), "rule__Edge__SrcstateAssignment_1_0");
			builder.put(grammarAccess.getEdgeAccess().getSpecsAssignment_1_2(), "rule__Edge__SpecsAssignment_1_2");
			builder.put(grammarAccess.getEdgeAccess().getDststateAssignment_1_5(), "rule__Edge__DststateAssignment_1_5");
			builder.put(grammarAccess.getEdgeSpecsAccess().getAnnotationsAssignment_1(), "rule__EdgeSpecs__AnnotationsAssignment_1");
			builder.put(grammarAccess.getEdgeSpecsAccess().getAnnotationsAssignment_2_1(), "rule__EdgeSpecs__AnnotationsAssignment_2_1");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getProbabilityAssignment_0_2(), "rule__EdgeAnnotation__ProbabilityAssignment_0_2");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getProbabilityAssignment_1(), "rule__EdgeAnnotation__ProbabilityAssignment_1");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_0(), "rule__State__NameAssignment_0");
			builder.put(grammarAccess.getStateAccess().getSpecsAssignment_1(), "rule__State__SpecsAssignment_1");
			builder.put(grammarAccess.getStateSpecsAccess().getAnnotationsAssignment_2(), "rule__StateSpecs__AnnotationsAssignment_2");
			builder.put(grammarAccess.getStateSpecsAccess().getAnnotationsAssignment_3_1(), "rule__StateSpecs__AnnotationsAssignment_3_1");
			builder.put(grammarAccess.getStateAnnotationAccess().getInitprobAssignment_0_1(), "rule__StateAnnotation__InitprobAssignment_0_1");
			builder.put(grammarAccess.getStateAnnotationAccess().getRewardAssignment_1_1(), "rule__StateAnnotation__RewardAssignment_1_1");
			builder.put(grammarAccess.getProbabilityAccess().getRatioAssignment_0(), "rule__Probability__RatioAssignment_0");
			builder.put(grammarAccess.getProbabilityAccess().getFloatAssignment_1(), "rule__Probability__FloatAssignment_1");
			builder.put(grammarAccess.getProbabilityAccess().getIntAssignment_2(), "rule__Probability__IntAssignment_2");
			builder.put(grammarAccess.getPosRatioAccess().getNumeratorAssignment_0(), "rule__PosRatio__NumeratorAssignment_0");
			builder.put(grammarAccess.getPosRatioAccess().getDenominatorAssignment_2(), "rule__PosRatio__DenominatorAssignment_2");
			builder.put(grammarAccess.getRewardAccess().getRatioAssignment_0(), "rule__Reward__RatioAssignment_0");
			builder.put(grammarAccess.getRewardAccess().getFloatAssignment_1(), "rule__Reward__FloatAssignment_1");
			builder.put(grammarAccess.getRewardAccess().getIntAssignment_2(), "rule__Reward__IntAssignment_2");
			builder.put(grammarAccess.getRewardAccess().getNegintAssignment_3(), "rule__Reward__NegintAssignment_3");
			builder.put(grammarAccess.getPosNegRatioAccess().getNumeratorAssignment_0_0(), "rule__PosNegRatio__NumeratorAssignment_0_0");
			builder.put(grammarAccess.getPosNegRatioAccess().getNegnumeratorAssignment_0_1(), "rule__PosNegRatio__NegnumeratorAssignment_0_1");
			builder.put(grammarAccess.getPosNegRatioAccess().getDenominatorAssignment_2(), "rule__PosNegRatio__DenominatorAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MarkovChainsGrammarAccess grammarAccess;

	@Override
	protected InternalMarkovChainsParser createParser() {
		InternalMarkovChainsParser result = new InternalMarkovChainsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MarkovChainsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MarkovChainsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
