/*
 * generated by Xtext 2.29.0
 */
package info.computationalmodeling.lang.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import info.computationalmodeling.lang.ide.contentassist.antlr.internal.InternalDataflowParser;
import info.computationalmodeling.lang.services.DataflowGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DataflowParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DataflowGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DataflowGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEdgeAccess().getAlternatives(), "rule__Edge__Alternatives");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getAlternatives(), "rule__EdgeAnnotation__Alternatives");
			builder.put(grammarAccess.getTimeStampAccess().getAlternatives(), "rule__TimeStamp__Alternatives");
			builder.put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
			builder.put(grammarAccess.getNumberAccess().getValueAlternatives_1_0(), "rule__Number__ValueAlternatives_1_0");
			builder.put(grammarAccess.getPNIntAccess().getAlternatives(), "rule__PNInt__Alternatives");
			builder.put(grammarAccess.getDataflowModelAccess().getGroup(), "rule__DataflowModel__Group__0");
			builder.put(grammarAccess.getDataflowModelAccess().getGroup_0(), "rule__DataflowModel__Group_0__0");
			builder.put(grammarAccess.getDataflowModelAccess().getGroup_5(), "rule__DataflowModel__Group_5__0");
			builder.put(grammarAccess.getDataflowModelAccess().getGroup_5_2(), "rule__DataflowModel__Group_5_2__0");
			builder.put(grammarAccess.getDataflowModelAccess().getGroup_6(), "rule__DataflowModel__Group_6__0");
			builder.put(grammarAccess.getDataflowModelAccess().getGroup_6_2(), "rule__DataflowModel__Group_6_2__0");
			builder.put(grammarAccess.getEdgeAccess().getGroup_0(), "rule__Edge__Group_0__0");
			builder.put(grammarAccess.getEdgeAccess().getGroup_1(), "rule__Edge__Group_1__0");
			builder.put(grammarAccess.getEdgeSpecsAccess().getGroup(), "rule__EdgeSpecs__Group__0");
			builder.put(grammarAccess.getEdgeSpecsAccess().getGroup_2(), "rule__EdgeSpecs__Group_2__0");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getGroup_0(), "rule__EdgeAnnotation__Group_0__0");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getGroup_0_0(), "rule__EdgeAnnotation__Group_0_0__0");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getGroup_1(), "rule__EdgeAnnotation__Group_1__0");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getGroup_2(), "rule__EdgeAnnotation__Group_2__0");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getGroup_3(), "rule__EdgeAnnotation__Group_3__0");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getGroup_4(), "rule__EdgeAnnotation__Group_4__0");
			builder.put(grammarAccess.getActorAccess().getGroup(), "rule__Actor__Group__0");
			builder.put(grammarAccess.getActorSpecsAccess().getGroup(), "rule__ActorSpecs__Group__0");
			builder.put(grammarAccess.getActorSpecsAccess().getGroup_3(), "rule__ActorSpecs__Group_3__0");
			builder.put(grammarAccess.getActorAnnotationAccess().getGroup(), "rule__ActorAnnotation__Group__0");
			builder.put(grammarAccess.getActorAnnotationAccess().getGroup_0(), "rule__ActorAnnotation__Group_0__0");
			builder.put(grammarAccess.getInputSignalsAccess().getGroup(), "rule__InputSignals__Group__0");
			builder.put(grammarAccess.getSignalAccess().getGroup(), "rule__Signal__Group__0");
			builder.put(grammarAccess.getSignalAccess().getGroup_3(), "rule__Signal__Group_3__0");
			builder.put(grammarAccess.getSignalAccess().getGroup_3_1(), "rule__Signal__Group_3_1__0");
			builder.put(grammarAccess.getRatioAccess().getGroup(), "rule__Ratio__Group__0");
			builder.put(grammarAccess.getDataflowModelAccess().getAuthorAssignment_0_2(), "rule__DataflowModel__AuthorAssignment_0_2");
			builder.put(grammarAccess.getDataflowModelAccess().getNameAssignment_3(), "rule__DataflowModel__NameAssignment_3");
			builder.put(grammarAccess.getDataflowModelAccess().getInputsAssignment_5_1(), "rule__DataflowModel__InputsAssignment_5_1");
			builder.put(grammarAccess.getDataflowModelAccess().getInputsAssignment_5_2_1(), "rule__DataflowModel__InputsAssignment_5_2_1");
			builder.put(grammarAccess.getDataflowModelAccess().getOutputsAssignment_6_1(), "rule__DataflowModel__OutputsAssignment_6_1");
			builder.put(grammarAccess.getDataflowModelAccess().getOutputsAssignment_6_2_1(), "rule__DataflowModel__OutputsAssignment_6_2_1");
			builder.put(grammarAccess.getDataflowModelAccess().getEdgesAssignment_7(), "rule__DataflowModel__EdgesAssignment_7");
			builder.put(grammarAccess.getDataflowModelAccess().getInputsignalsAssignment_9(), "rule__DataflowModel__InputsignalsAssignment_9");
			builder.put(grammarAccess.getEdgeAccess().getSrcactAssignment_0_0(), "rule__Edge__SrcactAssignment_0_0");
			builder.put(grammarAccess.getEdgeAccess().getDstactAssignment_0_3(), "rule__Edge__DstactAssignment_0_3");
			builder.put(grammarAccess.getEdgeAccess().getSrcactAssignment_1_0(), "rule__Edge__SrcactAssignment_1_0");
			builder.put(grammarAccess.getEdgeAccess().getSpecsAssignment_1_2(), "rule__Edge__SpecsAssignment_1_2");
			builder.put(grammarAccess.getEdgeAccess().getDstactAssignment_1_5(), "rule__Edge__DstactAssignment_1_5");
			builder.put(grammarAccess.getEdgeSpecsAccess().getAnnotationsAssignment_1(), "rule__EdgeSpecs__AnnotationsAssignment_1");
			builder.put(grammarAccess.getEdgeSpecsAccess().getAnnotationsAssignment_2_1(), "rule__EdgeSpecs__AnnotationsAssignment_2_1");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getInitialtokensAssignment_0_1(), "rule__EdgeAnnotation__InitialtokensAssignment_0_1");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getProdrateAssignment_1_3(), "rule__EdgeAnnotation__ProdrateAssignment_1_3");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getConsrateAssignment_2_3(), "rule__EdgeAnnotation__ConsrateAssignment_2_3");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getNameAssignment_3_2(), "rule__EdgeAnnotation__NameAssignment_3_2");
			builder.put(grammarAccess.getEdgeAnnotationAccess().getTokensizeAssignment_4_3(), "rule__EdgeAnnotation__TokensizeAssignment_4_3");
			builder.put(grammarAccess.getActorAccess().getNameAssignment_0(), "rule__Actor__NameAssignment_0");
			builder.put(grammarAccess.getActorAccess().getSpecsAssignment_1(), "rule__Actor__SpecsAssignment_1");
			builder.put(grammarAccess.getActorSpecsAccess().getAnnotationsAssignment_2(), "rule__ActorSpecs__AnnotationsAssignment_2");
			builder.put(grammarAccess.getActorSpecsAccess().getAnnotationsAssignment_3_1(), "rule__ActorSpecs__AnnotationsAssignment_3_1");
			builder.put(grammarAccess.getActorAnnotationAccess().getExecutiontimeAssignment_1(), "rule__ActorAnnotation__ExecutiontimeAssignment_1");
			builder.put(grammarAccess.getInputSignalsAccess().getSignalsAssignment_2(), "rule__InputSignals__SignalsAssignment_2");
			builder.put(grammarAccess.getSignalAccess().getNameAssignment_0(), "rule__Signal__NameAssignment_0");
			builder.put(grammarAccess.getSignalAccess().getTimestampsAssignment_3_0(), "rule__Signal__TimestampsAssignment_3_0");
			builder.put(grammarAccess.getSignalAccess().getTimestampsAssignment_3_1_1(), "rule__Signal__TimestampsAssignment_3_1_1");
			builder.put(grammarAccess.getNumberAccess().getRatioAssignment_0(), "rule__Number__RatioAssignment_0");
			builder.put(grammarAccess.getNumberAccess().getValueAssignment_1(), "rule__Number__ValueAssignment_1");
			builder.put(grammarAccess.getRatioAccess().getNumeratorAssignment_0(), "rule__Ratio__NumeratorAssignment_0");
			builder.put(grammarAccess.getRatioAccess().getDenominatorAssignment_2(), "rule__Ratio__DenominatorAssignment_2");
			builder.put(grammarAccess.getInputAccess().getNameAssignment(), "rule__Input__NameAssignment");
			builder.put(grammarAccess.getOutputAccess().getNameAssignment(), "rule__Output__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DataflowGrammarAccess grammarAccess;

	@Override
	protected InternalDataflowParser createParser() {
		InternalDataflowParser result = new InternalDataflowParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DataflowGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DataflowGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
