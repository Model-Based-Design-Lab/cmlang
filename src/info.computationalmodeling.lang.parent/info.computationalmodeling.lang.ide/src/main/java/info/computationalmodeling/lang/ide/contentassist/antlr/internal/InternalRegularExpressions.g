/*
 * generated by Xtext 2.29.0
 */
grammar InternalRegularExpressions;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package info.computationalmodeling.lang.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package info.computationalmodeling.lang.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import info.computationalmodeling.lang.services.RegularExpressionsGrammarAccess;

}
@parser::members {
	private RegularExpressionsGrammarAccess grammarAccess;

	public void setGrammarAccess(RegularExpressionsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRegExModel
entryRuleRegExModel
:
{ before(grammarAccess.getRegExModelRule()); }
	 ruleRegExModel
{ after(grammarAccess.getRegExModelRule()); } 
	 EOF 
;

// Rule RegExModel
ruleRegExModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegExModelAccess().getGroup()); }
		(rule__RegExModel__Group__0)
		{ after(grammarAccess.getRegExModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefinition
entryRuleDefinition
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup()); }
		(rule__Definition__Group__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegularExpression
entryRuleRegularExpression
:
{ before(grammarAccess.getRegularExpressionRule()); }
	 ruleRegularExpression
{ after(grammarAccess.getRegularExpressionRule()); } 
	 EOF 
;

// Rule RegularExpression
ruleRegularExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegularExpressionAccess().getGroup()); }
		(rule__RegularExpression__Group__0)
		{ after(grammarAccess.getRegularExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegularExpression1
entryRuleRegularExpression1
:
{ before(grammarAccess.getRegularExpression1Rule()); }
	 ruleRegularExpression1
{ after(grammarAccess.getRegularExpression1Rule()); } 
	 EOF 
;

// Rule RegularExpression1
ruleRegularExpression1 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegularExpression1Access().getGroup()); }
		(rule__RegularExpression1__Group__0)
		{ after(grammarAccess.getRegularExpression1Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegularExpression2
entryRuleRegularExpression2
:
{ before(grammarAccess.getRegularExpression2Rule()); }
	 ruleRegularExpression2
{ after(grammarAccess.getRegularExpression2Rule()); } 
	 EOF 
;

// Rule RegularExpression2
ruleRegularExpression2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegularExpression2Access().getGroup()); }
		(rule__RegularExpression2__Group__0)
		{ after(grammarAccess.getRegularExpression2Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegularExpression3
entryRuleRegularExpression3
:
{ before(grammarAccess.getRegularExpression3Rule()); }
	 ruleRegularExpression3
{ after(grammarAccess.getRegularExpression3Rule()); } 
	 EOF 
;

// Rule RegularExpression3
ruleRegularExpression3 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegularExpression3Access().getAlternatives()); }
		(rule__RegularExpression3__Alternatives)
		{ after(grammarAccess.getRegularExpression3Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEmptyLanguageExpression
entryRuleEmptyLanguageExpression
:
{ before(grammarAccess.getEmptyLanguageExpressionRule()); }
	 ruleEmptyLanguageExpression
{ after(grammarAccess.getEmptyLanguageExpressionRule()); } 
	 EOF 
;

// Rule EmptyLanguageExpression
ruleEmptyLanguageExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEmptyLanguageExpressionAccess().getEMPTYSETTerminalRuleCall()); }
		RULE_EMPTYSET
		{ after(grammarAccess.getEmptyLanguageExpressionAccess().getEMPTYSETTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEmptyWordExpression
entryRuleEmptyWordExpression
:
{ before(grammarAccess.getEmptyWordExpressionRule()); }
	 ruleEmptyWordExpression
{ after(grammarAccess.getEmptyWordExpressionRule()); } 
	 EOF 
;

// Rule EmptyWordExpression
ruleEmptyWordExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEmptyWordExpressionAccess().getEPSILONTerminalRuleCall()); }
		RULE_EPSILON
		{ after(grammarAccess.getEmptyWordExpressionAccess().getEPSILONTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLetterExpression
entryRuleLetterExpression
:
{ before(grammarAccess.getLetterExpressionRule()); }
	 ruleLetterExpression
{ after(grammarAccess.getLetterExpressionRule()); } 
	 EOF 
;

// Rule LetterExpression
ruleLetterExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLetterExpressionAccess().getLetterParserRuleCall()); }
		ruleLetter
		{ after(grammarAccess.getLetterExpressionAccess().getLetterParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReferenceExpression
entryRuleReferenceExpression
:
{ before(grammarAccess.getReferenceExpressionRule()); }
	 ruleReferenceExpression
{ after(grammarAccess.getReferenceExpressionRule()); } 
	 EOF 
;

// Rule ReferenceExpression
ruleReferenceExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferenceExpressionAccess().getGroup()); }
		(rule__ReferenceExpression__Group__0)
		{ after(grammarAccess.getReferenceExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLetter
entryRuleLetter
:
{ before(grammarAccess.getLetterRule()); }
	 ruleLetter
{ after(grammarAccess.getLetterRule()); } 
	 EOF 
;

// Rule Letter
ruleLetter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLetterAccess().getAlternatives()); }
		(rule__Letter__Alternatives)
		{ after(grammarAccess.getLetterAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression2__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression2Access().getKleeneAssignment_1_0()); }
		(rule__RegularExpression2__KleeneAssignment_1_0)
		{ after(grammarAccess.getRegularExpression2Access().getKleeneAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getRegularExpression2Access().getOmegaAssignment_1_1()); }
		(rule__RegularExpression2__OmegaAssignment_1_1)
		{ after(grammarAccess.getRegularExpression2Access().getOmegaAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression3Access().getGroup_0()); }
		(rule__RegularExpression3__Group_0__0)
		{ after(grammarAccess.getRegularExpression3Access().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRegularExpression3Access().getGroup_1()); }
		(rule__RegularExpression3__Group_1__0)
		{ after(grammarAccess.getRegularExpression3Access().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getRegularExpression3Access().getGroup_2()); }
		(rule__RegularExpression3__Group_2__0)
		{ after(grammarAccess.getRegularExpression3Access().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getRegularExpression3Access().getGroup_3()); }
		(rule__RegularExpression3__Group_3__0)
		{ after(grammarAccess.getRegularExpression3Access().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getRegularExpression3Access().getGroup_4()); }
		(rule__RegularExpression3__Group_4__0)
		{ after(grammarAccess.getRegularExpression3Access().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Letter__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetterAccess().getSIMPLELETTERTerminalRuleCall_0()); }
		RULE_SIMPLELETTER
		{ after(grammarAccess.getLetterAccess().getSIMPLELETTERTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLetterAccess().getSTRINGTerminalRuleCall_1()); }
		RULE_STRING
		{ after(grammarAccess.getLetterAccess().getSTRINGTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegExModel__Group__0__Impl
	rule__RegExModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegExModelAccess().getRegularKeyword_0()); }
	'regular'
	{ after(grammarAccess.getRegExModelAccess().getRegularKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegExModel__Group__1__Impl
	rule__RegExModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegExModelAccess().getExpressionKeyword_1()); }
	'expression'
	{ after(grammarAccess.getRegExModelAccess().getExpressionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegExModel__Group__2__Impl
	rule__RegExModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegExModelAccess().getNameAssignment_2()); }
	(rule__RegExModel__NameAssignment_2)
	{ after(grammarAccess.getRegExModelAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegExModel__Group__3__Impl
	rule__RegExModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegExModelAccess().getEqualsSignKeyword_3()); }
	'='
	{ after(grammarAccess.getRegExModelAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegExModel__Group__4__Impl
	rule__RegExModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegExModelAccess().getExpressionAssignment_4()); }
	(rule__RegExModel__ExpressionAssignment_4)
	{ after(grammarAccess.getRegExModelAccess().getExpressionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegExModel__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegExModelAccess().getGroup_5()); }
	(rule__RegExModel__Group_5__0)?
	{ after(grammarAccess.getRegExModelAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegExModel__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegExModel__Group_5__0__Impl
	rule__RegExModel__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegExModelAccess().getWhereKeyword_5_0()); }
	'where'
	{ after(grammarAccess.getRegExModelAccess().getWhereKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegExModel__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegExModelAccess().getDefinitionsAssignment_5_1()); }
	(rule__RegExModel__DefinitionsAssignment_5_1)*
	{ after(grammarAccess.getRegExModelAccess().getDefinitionsAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__0__Impl
	rule__Definition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getSymbolAssignment_0()); }
	(rule__Definition__SymbolAssignment_0)
	{ after(grammarAccess.getDefinitionAccess().getSymbolAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__1__Impl
	rule__Definition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getDefinitionAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getExpressionAssignment_2()); }
	(rule__Definition__ExpressionAssignment_2)
	{ after(grammarAccess.getDefinitionAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression__Group__0__Impl
	rule__RegularExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpressionAccess().getExpressionAssignment_0()); }
	(rule__RegularExpression__ExpressionAssignment_0)
	{ after(grammarAccess.getRegularExpressionAccess().getExpressionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpressionAccess().getGroup_1()); }
	(rule__RegularExpression__Group_1__0)?
	{ after(grammarAccess.getRegularExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression__Group_1__0__Impl
	rule__RegularExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpressionAccess().getPlusSignKeyword_1_0()); }
	'+'
	{ after(grammarAccess.getRegularExpressionAccess().getPlusSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression__Group_1__1__Impl
	rule__RegularExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpressionAccess().getAlternativesAssignment_1_1()); }
	(rule__RegularExpression__AlternativesAssignment_1_1)
	{ after(grammarAccess.getRegularExpressionAccess().getAlternativesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpressionAccess().getGroup_1_2()); }
	(rule__RegularExpression__Group_1_2__0)*
	{ after(grammarAccess.getRegularExpressionAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression__Group_1_2__0__Impl
	rule__RegularExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpressionAccess().getPlusSignKeyword_1_2_0()); }
	'+'
	{ after(grammarAccess.getRegularExpressionAccess().getPlusSignKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpressionAccess().getAlternativesAssignment_1_2_1()); }
	(rule__RegularExpression__AlternativesAssignment_1_2_1)
	{ after(grammarAccess.getRegularExpressionAccess().getAlternativesAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression1__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression1__Group__0__Impl
	rule__RegularExpression1__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression1Access().getExpressionAssignment_0()); }
	(rule__RegularExpression1__ExpressionAssignment_0)
	{ after(grammarAccess.getRegularExpression1Access().getExpressionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression1__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression1Access().getGroup_1()); }
	(rule__RegularExpression1__Group_1__0)?
	{ after(grammarAccess.getRegularExpression1Access().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression1__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression1__Group_1__0__Impl
	rule__RegularExpression1__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression1Access().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getRegularExpression1Access().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression1__Group_1__1__Impl
	rule__RegularExpression1__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression1Access().getConcatenationsAssignment_1_1()); }
	(rule__RegularExpression1__ConcatenationsAssignment_1_1)
	{ after(grammarAccess.getRegularExpression1Access().getConcatenationsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression1__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression1Access().getGroup_1_2()); }
	(rule__RegularExpression1__Group_1_2__0)*
	{ after(grammarAccess.getRegularExpression1Access().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression1__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression1__Group_1_2__0__Impl
	rule__RegularExpression1__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression1Access().getFullStopKeyword_1_2_0()); }
	'.'
	{ after(grammarAccess.getRegularExpression1Access().getFullStopKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression1__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression1Access().getConcatenationsAssignment_1_2_1()); }
	(rule__RegularExpression1__ConcatenationsAssignment_1_2_1)
	{ after(grammarAccess.getRegularExpression1Access().getConcatenationsAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression2__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression2__Group__0__Impl
	rule__RegularExpression2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression2__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression2Access().getSubexpressionAssignment_0()); }
	(rule__RegularExpression2__SubexpressionAssignment_0)
	{ after(grammarAccess.getRegularExpression2Access().getSubexpressionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression2__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression2__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression2__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression2Access().getAlternatives_1()); }
	(rule__RegularExpression2__Alternatives_1)?
	{ after(grammarAccess.getRegularExpression2Access().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression3__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression3__Group_0__0__Impl
	rule__RegularExpression3__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression3Access().getRegularExpression3Action_0_0()); }
	()
	{ after(grammarAccess.getRegularExpression3Access().getRegularExpression3Action_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression3__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression3Access().getEmptyLangExpressionAssignment_0_1()); }
	(rule__RegularExpression3__EmptyLangExpressionAssignment_0_1)
	{ after(grammarAccess.getRegularExpression3Access().getEmptyLangExpressionAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression3__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression3__Group_1__0__Impl
	rule__RegularExpression3__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression3Access().getRegularExpression3Action_1_0()); }
	()
	{ after(grammarAccess.getRegularExpression3Access().getRegularExpression3Action_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression3__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression3Access().getEmptyWordExpressionAssignment_1_1()); }
	(rule__RegularExpression3__EmptyWordExpressionAssignment_1_1)
	{ after(grammarAccess.getRegularExpression3Access().getEmptyWordExpressionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression3__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression3__Group_2__0__Impl
	rule__RegularExpression3__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression3Access().getRegularExpression3Action_2_0()); }
	()
	{ after(grammarAccess.getRegularExpression3Access().getRegularExpression3Action_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression3__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression3Access().getLetterExpressionAssignment_2_1()); }
	(rule__RegularExpression3__LetterExpressionAssignment_2_1)
	{ after(grammarAccess.getRegularExpression3Access().getLetterExpressionAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression3__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression3__Group_3__0__Impl
	rule__RegularExpression3__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression3Access().getRegularExpression3Action_3_0()); }
	()
	{ after(grammarAccess.getRegularExpression3Access().getRegularExpression3Action_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression3__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression3Access().getReferenceExpressionAssignment_3_1()); }
	(rule__RegularExpression3__ReferenceExpressionAssignment_3_1)
	{ after(grammarAccess.getRegularExpression3Access().getReferenceExpressionAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegularExpression3__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression3__Group_4__0__Impl
	rule__RegularExpression3__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression3Access().getLeftParenthesisKeyword_4_0()); }
	'('
	{ after(grammarAccess.getRegularExpression3Access().getLeftParenthesisKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression3__Group_4__1__Impl
	rule__RegularExpression3__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression3Access().getExpressionAssignment_4_1()); }
	(rule__RegularExpression3__ExpressionAssignment_4_1)
	{ after(grammarAccess.getRegularExpression3Access().getExpressionAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegularExpression3__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegularExpression3Access().getRightParenthesisKeyword_4_2()); }
	')'
	{ after(grammarAccess.getRegularExpression3Access().getRightParenthesisKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReferenceExpression__Group__0__Impl
	rule__ReferenceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceExpressionAccess().getCommercialAtKeyword_0()); }
	'@'
	{ after(grammarAccess.getReferenceExpressionAccess().getCommercialAtKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReferenceExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceExpressionAccess().getReferenceAssignment_1()); }
	(rule__ReferenceExpression__ReferenceAssignment_1)
	{ after(grammarAccess.getReferenceExpressionAccess().getReferenceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegExModel__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegExModelAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getRegExModelAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__ExpressionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegExModelAccess().getExpressionRegularExpressionParserRuleCall_4_0()); }
		ruleRegularExpression
		{ after(grammarAccess.getRegExModelAccess().getExpressionRegularExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegExModel__DefinitionsAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegExModelAccess().getDefinitionsDefinitionParserRuleCall_5_1_0()); }
		ruleDefinition
		{ after(grammarAccess.getRegExModelAccess().getDefinitionsDefinitionParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__SymbolAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getSymbolIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getDefinitionAccess().getSymbolIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getExpressionRegularExpressionParserRuleCall_2_0()); }
		ruleRegularExpression
		{ after(grammarAccess.getDefinitionAccess().getExpressionRegularExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__ExpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpressionAccess().getExpressionRegularExpression1ParserRuleCall_0_0()); }
		ruleRegularExpression1
		{ after(grammarAccess.getRegularExpressionAccess().getExpressionRegularExpression1ParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__AlternativesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpressionAccess().getAlternativesRegularExpression1ParserRuleCall_1_1_0()); }
		ruleRegularExpression1
		{ after(grammarAccess.getRegularExpressionAccess().getAlternativesRegularExpression1ParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression__AlternativesAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpressionAccess().getAlternativesRegularExpression1ParserRuleCall_1_2_1_0()); }
		ruleRegularExpression1
		{ after(grammarAccess.getRegularExpressionAccess().getAlternativesRegularExpression1ParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__ExpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression1Access().getExpressionRegularExpression2ParserRuleCall_0_0()); }
		ruleRegularExpression2
		{ after(grammarAccess.getRegularExpression1Access().getExpressionRegularExpression2ParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__ConcatenationsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression1Access().getConcatenationsRegularExpression2ParserRuleCall_1_1_0()); }
		ruleRegularExpression2
		{ after(grammarAccess.getRegularExpression1Access().getConcatenationsRegularExpression2ParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression1__ConcatenationsAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression1Access().getConcatenationsRegularExpression2ParserRuleCall_1_2_1_0()); }
		ruleRegularExpression2
		{ after(grammarAccess.getRegularExpression1Access().getConcatenationsRegularExpression2ParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression2__SubexpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression2Access().getSubexpressionRegularExpression3ParserRuleCall_0_0()); }
		ruleRegularExpression3
		{ after(grammarAccess.getRegularExpression2Access().getSubexpressionRegularExpression3ParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression2__KleeneAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression2Access().getKleeneAsteriskKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getRegularExpression2Access().getKleeneAsteriskKeyword_1_0_0()); }
			'*'
			{ after(grammarAccess.getRegularExpression2Access().getKleeneAsteriskKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getRegularExpression2Access().getKleeneAsteriskKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression2__OmegaAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression2Access().getOmegaAsteriskAsteriskKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getRegularExpression2Access().getOmegaAsteriskAsteriskKeyword_1_1_0()); }
			'**'
			{ after(grammarAccess.getRegularExpression2Access().getOmegaAsteriskAsteriskKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getRegularExpression2Access().getOmegaAsteriskAsteriskKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__EmptyLangExpressionAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression3Access().getEmptyLangExpressionEmptyLanguageExpressionParserRuleCall_0_1_0()); }
		ruleEmptyLanguageExpression
		{ after(grammarAccess.getRegularExpression3Access().getEmptyLangExpressionEmptyLanguageExpressionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__EmptyWordExpressionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression3Access().getEmptyWordExpressionEmptyWordExpressionParserRuleCall_1_1_0()); }
		ruleEmptyWordExpression
		{ after(grammarAccess.getRegularExpression3Access().getEmptyWordExpressionEmptyWordExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__LetterExpressionAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression3Access().getLetterExpressionLetterExpressionParserRuleCall_2_1_0()); }
		ruleLetterExpression
		{ after(grammarAccess.getRegularExpression3Access().getLetterExpressionLetterExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__ReferenceExpressionAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression3Access().getReferenceExpressionReferenceExpressionParserRuleCall_3_1_0()); }
		ruleReferenceExpression
		{ after(grammarAccess.getRegularExpression3Access().getReferenceExpressionReferenceExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegularExpression3__ExpressionAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegularExpression3Access().getExpressionRegularExpressionParserRuleCall_4_1_0()); }
		ruleRegularExpression
		{ after(grammarAccess.getRegularExpression3Access().getExpressionRegularExpressionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceExpression__ReferenceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceExpressionAccess().getReferenceIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getReferenceExpressionAccess().getReferenceIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SIMPLELETTER : ('a'..'z'|'A'..'Z');

RULE_EMPTYSET : '\\' 'o';

RULE_EPSILON : '\\' 'e';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
