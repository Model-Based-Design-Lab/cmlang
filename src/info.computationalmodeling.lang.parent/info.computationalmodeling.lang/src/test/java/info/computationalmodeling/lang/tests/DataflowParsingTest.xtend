/*
 * generated by Xtext 2.36.0
 */
package info.computationalmodeling.lang.tests

import com.google.inject.Inject
import info.computationalmodeling.lang.dataflow.DataflowModel
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(DataflowInjectorProvider)
class DataflowParsingTest {
	@Inject
	ParseHelper<DataflowModel> parseHelper
	
	@Test
	def void loadModel() {
// TODO test fails fix later
//		val result = parseHelper.parse('''
//dataflow graph Model {
//        A [execution time: 1] -- production rate: 2; name: c --> B [execution time: 2] 
//    	A -- initial tokens: 1 --> A 
//	    B -- initial tokens: 2 --> B
//    	B ----> C [execution time: 5]
//	    C ----> Y [execution time: 5]
//    	Y -- initial tokens: 4; consumption rate: 2 --> A 
//} 
//		''')
//		Assertions.assertNotNull(result)
//		val errors = result.eResource.errors
//		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
