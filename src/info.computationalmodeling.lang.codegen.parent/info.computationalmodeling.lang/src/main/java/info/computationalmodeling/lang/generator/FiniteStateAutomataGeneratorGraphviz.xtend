/*
 * generated by Xtext 2.19.0
 */
package info.computationalmodeling.lang.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import com.google.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import info.computationalmodeling.lang.finitestateautomata.FiniteStateAutomatonModel
import info.computationalmodeling.lang.finitestateautomata.Edge
import info.computationalmodeling.lang.finitestateautomata.State
import info.computationalmodeling.lang.finitestateautomata.UndecoratedState
import info.computationalmodeling.lang.FiniteStateAutomataSupport
import org.eclipse.emf.common.util.EList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FiniteStateAutomataGeneratorGraphviz extends AbstractGenerator {


	@Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

        for (m : resource.allContents.toIterable.filter(FiniteStateAutomatonModel)) {
			var ds = new FiniteStateAutomataSupport()
			ds.extractProperties(m)
	        fsa.generateFile(
	            m.fullyQualifiedName.toString("/") + ".dot",
	            m.compile(ds)
	        )
        }
	}

	def compile(FiniteStateAutomatonModel m, FiniteStateAutomataSupport ds) '''
		digraph «m.name» {
		rankdir="LR";
		graph [bgcolor=transparent,overlap=false]
		node [fontsize=20 fontname="Calibri" fillcolor="#98FDF4" width=0.6 penwidth=2 style=filled shape=circle]
		edge[fontsize=16 fontname="Calibri"]
			«this.compileGraph(m, ds)»
		}
    '''

	def compileGraph(FiniteStateAutomatonModel m, FiniteStateAutomataSupport ds) '''
		«FOR s: ds.setOfStates»
			«this.compileState(s, ds)»
		«ENDFOR»
		init [shape=point, label="", fillcolor="#000000" width=0.05 style=filled]
		«FOR e:m.edges»
			«this.compileEdge(e, ds)»
		«ENDFOR»
		«FOR s: ds.setOfStates»
			«this.compileInitialEdge(s, ds)»
		«ENDFOR»
		
    '''

	def compileEdge(Edge e, FiniteStateAutomataSupport ds) '''
		"«stateName(e.srcstate)»" -> "«stateName(e.dststate)»" [minlen=3 len=3 xlabel="«ds.getEdgeLabel(e)»"]
    '''

	def stateName(State s) {
		return stateName(s.ustate)
	}

	def stateName(EList<UndecoratedState> l) {
		return l.map[UndecoratedState us | stateName(us)]
	}

	def String stateName(UndecoratedState s) {
		if (s.name !== null) return s.name
		if (s.stateSet !== null) return '''{«String.join(',', stateName(s.stateSet.states))»}'''
		if (s.stateTuple !== null) return '''(«String.join(',', stateName(s.stateTuple.states))»)'''
		return "error!"
	}


	def compileState(String s, FiniteStateAutomataSupport ds) '''
		"«s»" [ «IF ds.stateProperties.get(s).contains('final')»peripheries = 2«ENDIF»«IF ds.stateToolTips.containsKey(s)» tooltip="«ds.stateToolTips.get(s)»"«ENDIF»]
    '''

	def compileInitialEdge(String s, FiniteStateAutomataSupport ds) '''
		«IF ds.stateProperties.get(s).contains('initial')»init -> "«s»" [minlen=2 len=2]«ENDIF»
    '''

}
